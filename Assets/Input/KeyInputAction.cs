//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/KeyInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerInputAction"",
            ""id"": ""d6e28b69-ffd4-469b-b1fa-99b4739df45c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9de6c554-b2a6-4b32-9284-0b0ad4b83407"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7cae6d94-b947-4ca0-9c0b-2d7d0a0cf9cb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickAction"",
                    ""type"": ""Button"",
                    ""id"": ""295ebbb7-d9a9-470e-8b10-43e1582bd28f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a0bcd6d8-92cb-4764-bbc0-18f8816c32bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ebb6eb4-4f5c-41f1-9234-67a43a4fdd93"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e150a3d0-bb05-4206-b27f-62c1682bad15"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a3e72927-f510-4d99-9548-53c9933824bc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53534a8e-1f25-4c57-8b4b-ea8ea707b491"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""d27c2027-bbb4-4f74-927c-c2ce4df060bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ed511910-2f7c-44fd-b03b-d56a57442a31"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f8ca041-0d83-40d1-a27a-309b3e0f982e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9e765e33-fb73-4c74-80cc-58ad3fecb939"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9420a70f-fc53-4a6e-b0aa-464e6a4789af"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bc532584-0415-45eb-8873-301471ad3e4a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";MOBILE"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd9527a1-ddbf-4555-a778-b2bc77adac87"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b60bdf53-53eb-4bf1-8bcd-eb0ced1200d4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""ClickAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MOBILE"",
            ""bindingGroup"": ""MOBILE"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInputAction
        m_PlayerInputAction = asset.FindActionMap("PlayerInputAction", throwIfNotFound: true);
        m_PlayerInputAction_Move = m_PlayerInputAction.FindAction("Move", throwIfNotFound: true);
        m_PlayerInputAction_Jump = m_PlayerInputAction.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInputAction_ClickAction = m_PlayerInputAction.FindAction("ClickAction", throwIfNotFound: true);
    }

    ~@KeyInputAction()
    {
        UnityEngine.Debug.Assert(!m_PlayerInputAction.enabled, "This will cause a leak and performance issues, KeyInputAction.PlayerInputAction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputAction
    private readonly InputActionMap m_PlayerInputAction;
    private List<IPlayerInputActionActions> m_PlayerInputActionActionsCallbackInterfaces = new List<IPlayerInputActionActions>();
    private readonly InputAction m_PlayerInputAction_Move;
    private readonly InputAction m_PlayerInputAction_Jump;
    private readonly InputAction m_PlayerInputAction_ClickAction;
    public struct PlayerInputActionActions
    {
        private @KeyInputAction m_Wrapper;
        public PlayerInputActionActions(@KeyInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerInputAction_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerInputAction_Jump;
        public InputAction @ClickAction => m_Wrapper.m_PlayerInputAction_ClickAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @ClickAction.started += instance.OnClickAction;
            @ClickAction.performed += instance.OnClickAction;
            @ClickAction.canceled += instance.OnClickAction;
        }

        private void UnregisterCallbacks(IPlayerInputActionActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @ClickAction.started -= instance.OnClickAction;
            @ClickAction.performed -= instance.OnClickAction;
            @ClickAction.canceled -= instance.OnClickAction;
        }

        public void RemoveCallbacks(IPlayerInputActionActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputActionActions @PlayerInputAction => new PlayerInputActionActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_MOBILESchemeIndex = -1;
    public InputControlScheme MOBILEScheme
    {
        get
        {
            if (m_MOBILESchemeIndex == -1) m_MOBILESchemeIndex = asset.FindControlSchemeIndex("MOBILE");
            return asset.controlSchemes[m_MOBILESchemeIndex];
        }
    }
    public interface IPlayerInputActionActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnClickAction(InputAction.CallbackContext context);
    }
}
